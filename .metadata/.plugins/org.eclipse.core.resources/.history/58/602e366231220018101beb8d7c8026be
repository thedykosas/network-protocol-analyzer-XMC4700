/*
 * tcpIpCommunication.h
 *
 *  Created on: Feb 11, 2016
 *      Author: BotezDia
 */ 

#ifndef TCPIPCOMMUNICATION_H_
#define TCPIPCOMMUNICATION_H_

#include <DAVE.h>
#include "Dave/Generated/ETH_LWIP/lwip/include/lwip/err.h"
#include "Dave/Generated/ETH_LWIP/lwip/include/lwip/pbuf.h"
#include "Dave/Generated/ETH_LWIP/lwip/include/lwip/ip4_addr.h"
#include "Dave/Generated/ETH_LWIP/lwip/include/lwip/netif.h"
#include "Dave/Generated/ETH_LWIP/lwip/include/lwip/tcp.h"
#include "macros.h"
#include "utils.h"


/* TCP server ports  */
#define LOCAL_PORT 			(54555) // Local port for receiving the packets
#define LOCAL_RESET_PORT 	(55555) // Local port to reset the server

/* Global variables */
uint8_t serverLocked; 				// indicates if the server is locked by a client or not
struct tcp_pcb *tcpPcbLockedClient; // the client that has the lock of the server
uint8_t serverLockedByTCPclient;	// indicates if the server is locked by a TCP client or a USB client
char messageReceived[BUFFER_SIZE];	// the message received through TCP/IP
uint8_t rebootSystem; 				// variable set to 1 if a REBOOT message is received

/* Callback methods */
err_t tcp_received_callback(void* arg, struct tcp_pcb* pcbTCP, struct pbuf* p, err_t err);
err_t tcp_sent_callback(void* arg, struct tcp_pcb* pcb, u16_t len);
err_t tcp_accepted_callback(void *arg, struct tcp_pcb *tpcb, signed char flags);
void tcp_err_callback(void *arg, err_t err);

/* Public methods */
err_t disconnectAllActiveClients();
err_t isMessageReceivedCompletely(struct pbuf* p);
void tcpInitServer(unsigned int port);
void tcpSendData(struct tcp_pcb *tpcb, char* data, uint32_t len);
void tcpSendDataToLockedClient(char* data, uint32_t len);
err_t sendMessageToClients(char* message);

struct Eth_variable{
	uint8_t set_by_user;
	uint8_t addr0;
	uint8_t addr1;
	uint8_t addr2;
	uint8_t addr3;
};
void init_ETH_var();
extern uint64_t mac_addr;
extern int mac_set_by_user;

extern struct Eth_variable ip;
extern struct Eth_variable gw;
extern struct Eth_variable netmask;

err_t setMac(char* mac);
err_t setGateway(char* gw);
err_t setSubnetMask(char* nm);
err_t setIp(char* ip);
ETH_LWIP_STATUS_t ETH_LWIP_Customized_Init(ETH_LWIP_t* handle);



#endif /* TCPIPCOMMUNICATION_H_ */
